# NOTE - Look into -R option for ld to reference IP

SRC_PATH:=src_cd

# path to all files to be included on the output disc
DISC_PATH:=dist

BOOT_DIR:=boot

# definitions for modules placed in Word RAM
MMD_WORDRAM:=test

# definitions for modules placed in Work RAM
MMD_WORKRAM:=

# IPX module definition
MMD_IPX:=ipx

# objects to be referenced at link time for standard (Work/Word RAM) modules
# (generally, this will be the IP and IPX for Main CPU side and
# SP and SPX for Sub CPU side)


### TODO - add SPX stuff

#MAIN_REFERENCE:=$(addprefix $(BUILD_PATH)/$(SRC_PATH)/,$(addsuffix .o,$(MAIN_REFERENCE)))
#SUB_REFERENCE:=$(addprefix $(BUILD_PATH)/$(SRC_PATH)/,$(SUB_REFERENCE))

# set up mmd filenames
MMD_IPX_DEF:=$(addprefix $(SRC_PATH)/,$(addsuffix .def,$(MMD_IPX)))
MMD_WORDRAM_DEF:=$(addprefix $(SRC_PATH)/,$(addsuffix .def,$(MMD_WORDRAM)))
MMD_WORKRAM_DEF:=$(addprefix $(SRC_PATH)/,$(addsuffix .def,$(MMD_WORKRAM)))

MMD_IPX_OUT:=$(addprefix $(BUILD_PATH)/, $(MMD_IPX_DEF:.def=.out))
MMD_WORDRAM_OUT:=$(addprefix $(BUILD_PATH)/, $(MMD_WORDRAM_DEF:.def=.out))
MMD_WORKRAM_OUT:=$(addprefix $(BUILD_PATH)/, $(MMD_WORKRAM_DEF:.def=.out))

# compile all source code to objects linkable in modules
SRC:=$(wildcard $(SRC_PATH)/*.[cs])

OBJ:=$(SRC:.c=.o)
OBJ:=$(OBJ:.s=.o)
OBJ:=$(addprefix $(BUILD_PATH)/,$(OBJ))
SYMBOLS:=$(OBJ:.o=_symbols.txt)

# put final module binaries in the disc path
MMD_BIN:=$(addprefix $(DISC_PATH)/,$(notdir $(MMD_WORDRAM_OUT:.out=.mmd)))
MMD_BIN+=$(addprefix $(DISC_PATH)/,$(notdir $(MMD_WORKRAM_OUT:.out=.mmd)))
MMD_BIN+=$(addprefix $(DISC_PATH)/,$(notdir $(MMD_IPX_OUT:.out=.mmd)))

#MMD_WORDRAM_SRC:=$(addprefix $(SRC_PATH)/, $(MMD_WORDRAM_SRC))
#MMD_WORKRAM_SRC:=$(addprefix $(SRC_PATH)/, $(MMD_WORKRAM_SRC))

#$(addprefix $(BUILD_PATH)/$(SRC_PATH)/,$(subst .s,.o,$(subst .c,.o,$(shell cat $(MMD_WORDRAM)))))

# Initial program (IP) config
IP_SRC:=$(wildcard $(SRC_PATH)/boot/ip.[cs])
IP_SRC+=$(wildcard $(SRC_PATH)/boot/ip_init.[cs])

IP_OBJ:=$(IP_SRC:.c=.o)
IP_OBJ:=$(IP_OBJ:.s=.o)
IP_OBJ:=$(addprefix $(BUILD_PATH)/, $(IP_OBJ))

IP_INIT_OBJ:=$(IP_INIT_SRC:.c=.o)
IP_INIT_OBJ:=$(IP_INIT_OBJ:.s=.o)
IP_INIT_OBJ:=$(addprefix $(BUILD_PATH)/, $(IP_INIT_OBJ))

IP_OUT:=$(BUILD_PATH)/$(SRC_PATH)/boot/ip.out
IP_BIN:=$(IP_OUT:.out=.bin)
IP_SYMBOLS:=$(IP_OUT:.out=_symbols.txt)

# System program (SP) config
SP_SRC:=$(wildcard $(SRC_PATH)/boot/sp.[cs])

SP_OBJ:=$(SP_SRC:.c=.o)
SP_OBJ:=$(SP_OBJ:.s=.o)
SP_OBJ:=$(addprefix $(BUILD_PATH)/, $(SP_OBJ))

SP_BIN:=$(SP_OBJ:.o=.bin)
SP_OUT:=$(SP_OBJ:.o=.out)
SP_SYMBOLS:=$(SP_OBJ:.o=_symbols.txt)

BOOT_SRC:=$(SRC_PATH)/boot/boot.s
BOOT_OBJ:=$(addprefix $(BUILD_PATH)/, $(BOOT_SRC:.s=.o))
BOOT_BIN:=$(BOOT_OBJ:.o=.bin)

MAIN_REFERENCE:=$(IP_OUT) $(MMD_IPX_OUT)

SUB_REFERENCE:=

all: disc
default: disc

.PHONY: clean

clean: clean_mmd clean_boot clean_disc

clean_mmd:
	@rm -rf $(MMD_BIN) $(MMD_WORDRAM_OUT) $(MMD_WORKRAM_OUT) $(MMD_IPX_OUT) $(OBJ) $(SYMBOLS)
	
clean_ip:
	@rm -rf $(IP_OBJ) $(IP_INIT_OBJ) $(IP_OUT) $(IP_BIN) $(IP_SYMBOLS)

clean_sp:
	@rm -rf $(SP_OBJ) $(SP_OUT) $(SP_BIN) $(SP_SYMBOLS)

clean_boot: clean_ip clean_sp
	@rm -rf $(BOOT_OBJ) $(BOOT_BIN)

clean_disc:
	@rm -rf $(BUILD_PATH)/$(PROJECT_NAME).iso

ip: $(IP_BIN)

sp: $(SP_BIN)

boot: ip sp $(BOOT_BIN)

mmd: $(OBJ) $(MAIN_REFERENCE) $(SUB_REFERENCE) $(MMD_BIN)

disc: mmd boot $(BUILD_PATH)/$(PROJECT_NAME).iso

$(BUILD_PATH)/$(PROJECT_NAME).iso: $(BOOT_BIN)
	mkisofs -iso-level 1 -G $< -pad -V "$(PROJECT_NAME)" -o $@ $(DISC_PATH)

$(DIST_PATH)/%.mmd: $(BUILD_PATH)/src_cd/%.out
	$(OBJCPY) -O binary $< $@

$(BUILD_PATH)/$(SRC_PATH)/mmd_header.o: $(LIB_PATH)/mmd_header.s
	$(AS) $(AS_FLAGS) $(INC) $(LIB_PATH)/mmd_header.s -o$(BUILD_PATH)/$(SRC_PATH)/mmd_header.o

$(MMD_WORKRAM_OUT): $(MMD_WORKRAM_DEF) $(BUILD_PATH)/$(SRC_PATH)/mmd_header.o
	$(LD) $(LD_FLAGS) -z muldefs  -T $(CFG_PATH)/mmd_workram.ld -o$@ $(BUILD_PATH)/$(SRC_PATH)/mmd_header.o $(addprefix $(BUILD_PATH)/$(SRC_PATH)/,$(subst .s,.o,$(subst .c,.o,$(shell cat $(MMD_WORKRAM_DEF))))) $(addprefix -R,$(MAIN_REFERENCE))
	$(NM) -n $@ > $(MMD_WORKRAM_OUT:.out=_symbols.txt)

$(MMD_WORDRAM_OUT): $(MMD_WORDRAM_DEF) $(BUILD_PATH)/$(SRC_PATH)/mmd_header.o
	$(LD) $(LD_FLAGS) -z muldefs  -T $(CFG_PATH)/mmd_wordram.ld -o$@ $(BUILD_PATH)/$(SRC_PATH)/mmd_header.o $(addprefix $(BUILD_PATH)/$(SRC_PATH)/,$(subst .s,.o,$(subst .c,.o,$(shell cat $(MMD_WORDRAM_DEF))))) $(addprefix -R,$(MAIN_REFERENCE))
	$(NM) -n $@ > $(MMD_WORDRAM_OUT:.out=_symbols.txt)

$(MMD_IPX_OUT): $(MMD_IPX_DEF) $(BUILD_PATH)/$(SRC_PATH)/mmd_header.o
	$(LD) $(LD_FLAGS) -R$(IP_OUT) -T $(CFG_PATH)/ipx.ld -o$@ $(BUILD_PATH)/$(SRC_PATH)/mmd_header.o $(addprefix $(BUILD_PATH)/$(SRC_PATH)/,$(subst .s,.o,$(subst .c,.o,$(shell cat $(MMD_IPX_DEF)))))
	$(NM) -n $@ > $(MMD_IPX_OUT:.out=_symbols.txt)

$(IP_OUT): $(IP_OBJ)
	$(LD) $(LD_FLAGS) -T $(CFG_PATH)/ip.ld -o $@ $^
	$(NM) -n $@ > $(IP_SYMBOLS)

$(IP_BIN): $(IP_OUT)
	$(OBJCPY) -O binary $< $@

$(SP_OUT): $(SP_OBJ)
	$(LD) $(LD_FLAGS) -T $(CFG_PATH)/sp.ld -o $@ $<
	$(NM) -n $@ > $(SP_SYMBOLS)

$(SP_BIN): $(SP_OUT)
	$(OBJCPY) -O binary $< $@

$(BOOT_BIN): $(BOOT_OBJ)
	$(OBJCPY) -O binary $< $@

$(BUILD_PATH)/%.o: %.c
	$(CC) $(CC_FLAGS) $(INC) $(CC_INC) -c $< -o$@

$(BUILD_PATH)/%.o: %.s
	$(AS) $(AS_FLAGS) $(INC) $< -o$@
#	$(CC) $(CC_FLAGS) -Wa,--register-prefix-optional -Wa,--bitwise-or $(INC) $(CC_INC) -c $< -o $@

$(BUILD_PATH)/$(PROJECT).iso: $(BUILD_PATH)/$(BOOTBIN)
	mkisofs -iso-level 1 -G $< -pad -V "$(PROJECT)" -o $@ $(DISC_DIR)

$(BUILD_PATH)/boot_symbols.txt: $(BUILD_PATH)/boot.out
	$(NM) -n $< > $@
	
